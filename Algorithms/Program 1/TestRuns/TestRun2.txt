==== Input #1 =================================

1 2 3 4 5 6 7 8 9 10 11 12 13 

==== Input #2 =================================

1 2 3 

==== Trace Logs ===============================

-- 1. Converting sorted array into AVL tree

Input #1
--------
#Trace: AVL tree built from an array.
#Trace: Inorder printing of AVL tree--
+-----------+--------+----------------+
| Node Data | Height | Balance Factor |
+-----------+--------+----------------+
|         1 |      1 |              1 |
|         2 |      0 |              0 |
|         3 |      2 |              0 |
|         4 |      0 |              0 |
|         5 |      1 |              0 |
|         6 |      0 |              0 |
|         7 |      3 |              0 |
|         8 |      1 |              1 |
|         9 |      0 |              0 |
|        10 |      2 |              0 |
|        11 |      0 |              0 |
|        12 |      1 |              0 |
|        13 |      0 |              0 |
+-----------+--------+----------------+

Input #2
--------
#Trace: AVL tree built from an array.
#Trace: Inorder printing of AVL tree--
+-----------+--------+----------------+
| Node Data | Height | Balance Factor |
+-----------+--------+----------------+
|         1 |      0 |              0 |
|         2 |      1 |              0 |
|         3 |      0 |              0 |
+-----------+--------+----------------+


-- 2. Converting AVL tree to sorted array

Input #1
--------
#Trace: AVL tree converted to sorted array.
#Trace: Sorted array-- 1 2 3 4 5 6 7 8 9 10 11 12 13 

Input #2
--------
#Trace: AVL tree converted to sorted array.
#Trace: Sorted array-- 1 2 3 


-- 3. Merging two AVL trees

#Trace: Merging two AVL trees, where m = 13 and n = 3...
#Trace: O(nlg(m+n)) merging applied.
#Trace: AVL tree converted to sorted array.
#Trace: Sorted array-- 1 2 3 
#Trace: Inserting 1 into AVL tree...
#Trace: 1 < 7, go down to left child.
#Trace: 1 < 3, go down to left child.
#Trace: 1 >= 1, go down to right child.
#Trace: 1 < 2, attached as left child of 2.
#Trace: RL case occurred on node containing 1.
#Trace: Right rotation applied to node containing 2.
#Trace: Left rotation applied to node containing 1.
#Trace: Inserting 2 into AVL tree...
#Trace: 2 < 7, go down to left child.
#Trace: 2 < 3, go down to left child.
#Trace: 2 >= 1, go down to right child.
#Trace: 2 >= 2, attached as right child of 2.
#Trace: Inserting 3 into AVL tree...
#Trace: 3 < 7, go down to left child.
#Trace: 3 >= 3, go down to right child.
#Trace: 3 < 5, go down to left child.
#Trace: 3 < 4, attached as left child of 4.
+-----------+--------+----------------+
| Node Data | Height | Balance Factor |
+-----------+--------+----------------+
|         1 |      0 |              0 |
|         1 |      2 |              1 |
|         2 |      1 |              1 |
|         2 |      0 |              0 |
|         3 |      3 |              0 |
|         3 |      0 |              0 |
|         4 |      1 |             -1 |
|         5 |      2 |             -1 |
|         6 |      0 |              0 |
|         7 |      4 |             -1 |
|         8 |      1 |              1 |
|         9 |      0 |              0 |
|        10 |      2 |              0 |
|        11 |      0 |              0 |
|        12 |      1 |              0 |
|        13 |      0 |              0 |
+-----------+--------+----------------+


-- 4. Additional tests

#Trace: AVL Tree initialized.
#Trace: Inserting 6 into AVL tree...
#Trace: 6 inserted as root.
#Trace: Inserting 6 into AVL tree...
#Trace: 6 >= 6, attached as right child of 6.
#Trace: Inserting 7 into AVL tree...
#Trace: 7 >= 6, go down to right child.
#Trace: 7 >= 6, attached as right child of 6.
#Trace: RR case occurred on node containing 6.
#Trace: Left rotation applied to node containing 6.
+-----------+--------+----------------+
| Node Data | Height | Balance Factor |
+-----------+--------+----------------+
|         6 |      0 |              0 |
|         6 |      1 |              0 |
|         7 |      0 |              0 |
+-----------+--------+----------------+

==== Output ===================================

-- Result of merging Input #1 and Input #2

+-----------+--------+----------------+
| Node Data | Height | Balance Factor |
+-----------+--------+----------------+
|         1 |      0 |              0 |
|         1 |      2 |              1 |
|         2 |      1 |              1 |
|         2 |      0 |              0 |
|         3 |      3 |              0 |
|         3 |      0 |              0 |
|         4 |      1 |             -1 |
|         5 |      2 |             -1 |
|         6 |      0 |              0 |
|         7 |      4 |             -1 |
|         8 |      1 |              1 |
|         9 |      0 |              0 |
|        10 |      2 |              0 |
|        11 |      0 |              0 |
|        12 |      1 |              0 |
|        13 |      0 |              0 |
+-----------+--------+----------------+

